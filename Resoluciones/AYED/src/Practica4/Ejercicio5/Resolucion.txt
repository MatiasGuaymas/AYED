Ejercicio 5
Se necesita generar una permutación random de los n primeros números enteros. Por ejemplo
[4,3,1,0,2] es una permutación legal, pero [0,4,1,2,4] no lo es, porque un número está duplicado
(el 4) y otro no está (el 3). Presentamos tres algoritmos para solucionar este problema. Asumimos
la existencia de un generador de números random, ran_int (i,j) el cual genera en tiempo constante,
enteros entre i y j inclusive con igual probabilidad (esto significa que puede retornar el mismo valor
más de una vez). También suponemos el mensaje swap() que intercambia dos datos entre sí.

package Practica4.Ejercicio5;

import java.util.Arrays;
import java.util.Random;

public class EjercicioPermutaciones {
    private static Random rand = new Random();
    
    public static int[] randomUno(int n) {
        int i, x = 0, k;
        int[] a = new int[n];
        for (i = 0; i < n; i++) {
            boolean seguirBuscando = true;
            while (seguirBuscando) {
                x = ran_int(0, n - 1);
                seguirBuscando = false;
                for (k = 0; k < i && !seguirBuscando; k++)
                    if (x == a[k])
                        seguirBuscando = true;
            }
            a[i] = x;
        }
        return a;
    }
    
    public static int[] randomDos(int n) {
        int i, x;
        int[] a = new int[n];
        boolean[] used = new boolean[n];
        for (i = 0; i < n; i++) used[i] = false;
        for (i = 0; i < n; i++) {
            x = ran_int(0, n - 1);
            while (used[x]) x = ran_int(0, n - 1);
            a[i] = x;
            used[x] = true;
        }
        return a;
    }

    public static int[] randomTres(int n) {
        int i;
        int[] a = new int[n];
        for (i = 0; i < n; i++) a[i] = i;
        for (i = 1; i < n; i++) swap(a, i, ran_int(0, i - 1));
        return a;
    }

    private static void swap(int[] a, int i, int j) {
        int aux;
        aux = a[i]; 
        a[i] = a[j]; 
        a[j] = aux;
    }

    /** Genera en tiempo constante, enteros entre i y j con igual probabilidad.
    */
    private static int ran_int(int a, int b) {
        if (b < a || a < 0 || b < 0) throw new IllegalArgumentException("Parametros invalidos");
        return a + (rand.nextInt(b - a + 1));
    }

    public static void main(String[] args) {
        System.out.println(Arrays.toString(randomUno(10)));
        System.out.println(Arrays.toString(randomDos(10)));
        System.out.println(Arrays.toString(randomTres(10)));
    }
}

a. Analizar si todos los algoritmos terminan o alguno puede quedar en loop infinito.
b. Describa con palabras la cantidad de operaciones que realizan.

a. Los primeros dos algoritmos podrían quedar en un loop infinito solamente cuando el generador de números aleatorios siempre retorna una secuencia de números repetidos. Los algoritmos están diseñados para que terminen una vez hallada una permutación legal, y en caso contrario sigan iterando, hasta hallarla. 
El último de todos en caso de que el generador retorne secuencias de números repetidos, la posición intercambiada sería la misma, pero no generaría un lazo infinito.
b.  OPERACIONES:
•	Se recorre la secuencia con un for desde i hasta n. 
•	Se loopea un while hasta encontrar un valor que no se encuentre en el arreglo.
•	Se recorre la secuencia en un for de k hasta i buscando si el número está repetido.
•	O(n3)	

•	Se recorre un for desde i hasta n poniendo el falso cada una de sus posiciones.
•	Se recorre un for desde i hasta n generando permutaciones.
•	Se recorre un while hasta encontrar un valor que no se encuentre en el arreglo.	
•	O(n2)	

•	Se recorre un for desde i hasta n inicializando vector de resultados con un valor correspondiente a su posición.
•	Se recorre un for desde i hasta n intercambia lo que está en el vector de resultados con otro valor en una posición random (de lo que llevo recorrido).
•	O(n)

